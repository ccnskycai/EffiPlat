// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"EffiPlat/backend/internal/handler"
	"EffiPlat/backend/internal/repository"
	"EffiPlat/backend/internal/service"
	"github.com/google/wire"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeUserHandler is the injector for UserHandler and its dependencies.
// It takes the database connection as input.
// This function will be callable from other packages (like main) because it's exported.
func InitializeUserHandler(db *gorm.DB, logger *zap.Logger) (*handler.UserHandler, error) {
	userRepository := repository.NewUserRepository(db, logger)
	userService := service.NewUserService(userRepository)
	userHandler := handler.NewUserHandler(userService)
	return userHandler, nil
}

// InitializeRoleHandler is the injector for RoleHandler and its dependencies.
func InitializeRoleHandler(db *gorm.DB, logger *zap.Logger) (*handler.RoleHandler, error) {
	roleRepositoryImpl := repository.NewRoleRepository(db, logger)
	roleServiceImpl := service.NewRoleService(roleRepositoryImpl, logger)
	roleHandler := handler.NewRoleHandler(roleServiceImpl, logger)
	return roleHandler, nil
}

// InitializeAuthHandler is the injector for AuthHandler.
// Make sure it has the //go:build wireinject tags if it's in a wireinject file.
// If wire.go is itself a wireinject file (based on build tags at the top),
// then this function template is fine.
func InitializeAuthHandler(db *gorm.DB, jwtKey []byte, logger *zap.Logger) (*handler.AuthHandler, error) {
	userRepository := repository.NewUserRepository(db, logger)
	authService := service.NewAuthService(userRepository, jwtKey, logger)
	authHandler := handler.NewAuthHandler(authService)
	return authHandler, nil
}

// InitializePermissionHandler is the injector for PermissionHandler and its dependencies.
func InitializePermissionHandler(db *gorm.DB, logger *zap.Logger) (*handler.PermissionHandler, error) {
	permissionRepositoryImpl := repository.NewPermissionRepository(db, logger)
	roleRepositoryImpl := repository.NewRoleRepository(db, logger)
	permissionService := service.NewPermissionService(permissionRepositoryImpl, roleRepositoryImpl, logger)
	permissionHandler := handler.NewPermissionHandler(permissionService, logger)
	return permissionHandler, nil
}

// wire.go:

// ProviderSet for user components
var UserSet = wire.NewSet(repository.NewUserRepository, service.NewUserService, handler.NewUserHandler)

// ProviderSet for role components
var RoleSet = wire.NewSet(repository.NewRoleRepository, service.NewRoleService, handler.NewRoleHandler, wire.Bind(new(repository.RoleRepository), new(*repository.RoleRepositoryImpl)), wire.Bind(new(service.RoleService), new(*service.RoleServiceImpl)))

// ProviderSet for auth components
var AuthSet = wire.NewSet(repository.NewUserRepository, service.NewAuthService, handler.NewAuthHandler)

// ProviderSet for permission components
var PermissionSet = wire.NewSet(repository.NewPermissionRepository, wire.Bind(new(repository.PermissionRepository), new(*repository.PermissionRepositoryImpl)), repository.NewRoleRepository, wire.Bind(new(repository.RoleRepository), new(*repository.RoleRepositoryImpl)), service.NewPermissionService, handler.NewPermissionHandler)
