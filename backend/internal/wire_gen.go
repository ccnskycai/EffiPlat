// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"EffiPlat/backend/internal/handler"
	"EffiPlat/backend/internal/repository"
	"EffiPlat/backend/internal/service"
	"github.com/google/wire"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeUserHandler is the injector for UserHandler and its dependencies.
// It takes the database connection as input.
// This function will be callable from other packages (like main) because it's exported.
func InitializeUserHandler(db *gorm.DB, logger *zap.Logger) (*handler.UserHandler, error) {
	userRepository := repository.NewUserRepository(db, logger)
	roleRepositoryImpl := repository.NewRoleRepository(db, logger)
	userService := service.NewUserService(userRepository, roleRepositoryImpl, logger)
	auditLogRepository := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepository, logger)
	userHandler := handler.NewUserHandler(userService, auditLogService, logger)
	return userHandler, nil
}

// InitializeRoleHandler is the injector for RoleHandler and its dependencies.
func InitializeRoleHandler(db *gorm.DB, logger *zap.Logger) (*handler.RoleHandler, error) {
	roleRepositoryImpl := repository.NewRoleRepository(db, logger)
	roleServiceImpl := service.NewRoleService(roleRepositoryImpl, logger)
	auditLogRepository := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepository, logger)
	roleHandler := handler.NewRoleHandler(roleServiceImpl, auditLogService, logger)
	return roleHandler, nil
}

// InitializeAuthHandler is the injector for AuthHandler.
// Make sure it has the //go:build wireinject tags if it's in a wireinject file.
// If wire.go is itself a wireinject file (based on build tags at the top),
// then this function template is fine.
func InitializeAuthHandler(db *gorm.DB, jwtKey []byte, logger *zap.Logger) (*handler.AuthHandler, error) {
	userRepository := repository.NewUserRepository(db, logger)
	authService := service.NewAuthService(userRepository, jwtKey, logger)
	authHandler := handler.NewAuthHandler(authService)
	return authHandler, nil
}

// InitializePermissionHandler is the injector for PermissionHandler and its dependencies.
func InitializePermissionHandler(db *gorm.DB, logger *zap.Logger) (*handler.PermissionHandler, error) {
	permissionRepositoryImpl := repository.NewPermissionRepository(db, logger)
	roleRepositoryImpl := repository.NewRoleRepository(db, logger)
	auditLogRepositoryImpl := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepositoryImpl, logger)
	permissionService := service.NewPermissionService(permissionRepositoryImpl, roleRepositoryImpl, logger)
	permissionHandler := handler.NewPermissionHandler(permissionService, auditLogService, logger)
	return permissionHandler, nil
}

// InitializeResponsibilityHandler is the injector for ResponsibilityHandler and its dependencies.
func InitializeResponsibilityHandler(db *gorm.DB, logger *zap.Logger) (*handler.ResponsibilityHandler, error) {
	responsibilityRepository := repository.NewGormResponsibilityRepository(db, logger)
	auditLogRepositoryImpl := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepositoryImpl, logger)
	responsibilityService := service.NewResponsibilityService(responsibilityRepository, logger)
	responsibilityHandler := handler.NewResponsibilityHandler(responsibilityService, auditLogService, logger)
	return responsibilityHandler, nil
}

// InitializeResponsibilityGroupHandler is the injector for ResponsibilityGroupHandler and its dependencies.
func InitializeResponsibilityGroupHandler(db *gorm.DB, logger *zap.Logger) (*handler.ResponsibilityGroupHandler, error) {
	responsibilityGroupRepository := repository.NewGormResponsibilityGroupRepository(db, logger)
	responsibilityRepository := repository.NewGormResponsibilityRepository(db, logger)
	auditLogRepositoryImpl := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepositoryImpl, logger)
	responsibilityGroupService := service.NewResponsibilityGroupService(responsibilityGroupRepository, responsibilityRepository, logger)
	responsibilityGroupHandler := handler.NewResponsibilityGroupHandler(responsibilityGroupService, auditLogService, logger)
	return responsibilityGroupHandler, nil
}

// InitializeEnvironmentHandler is the injector for EnvironmentHandler and its dependencies.
func InitializeEnvironmentHandler(db *gorm.DB, logger *zap.Logger) (*handler.EnvironmentHandler, error) {
	environmentRepository := repository.NewGormEnvironmentRepository(db, logger)
	environmentService := service.NewEnvironmentService(environmentRepository, logger)
	
	// 添加审计日志服务
	auditLogRepository := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepository, logger)
	
	environmentHandler := handler.NewEnvironmentHandler(environmentService, auditLogService, logger)
	return environmentHandler, nil
}

// InitializeEnvironmentRepository is the injector for EnvironmentRepository.
func InitializeEnvironmentRepository(db *gorm.DB, logger *zap.Logger) (repository.EnvironmentRepository, error) {
	environmentRepository := repository.NewGormEnvironmentRepository(db, logger)
	return environmentRepository, nil
}

// InitializeAssetHandler is the injector for AssetHandler and its dependencies.
func InitializeAssetHandler(db *gorm.DB, logger *zap.Logger, envRepo repository.EnvironmentRepository) (*handler.AssetHandler, error) {
	assetRepository := repository.NewGormAssetRepository(db, logger)
	assetService := service.NewAssetService(assetRepository, envRepo, logger)
	
	// 添加审计日志服务
	auditLogRepository := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepository, logger)
	
	assetHandler := handler.NewAssetHandler(assetService, auditLogService, logger)
	return assetHandler, nil
}

// InitializeServiceHandler is the injector for ServiceHandler and its dependencies.
func InitializeServiceHandler(db *gorm.DB, logger *zap.Logger) (*handler.ServiceHandler, error) {
	serviceRepository := repository.NewGormServiceRepository(db)
	serviceTypeRepository := repository.NewGormServiceTypeRepository(db)
	serviceService := service.NewServiceService(serviceRepository, serviceTypeRepository, logger)
	
	// 添加审计日志服务
	auditLogRepository := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepository, logger)
	
	serviceHandler := handler.NewServiceHandler(serviceService, auditLogService, logger)
	return serviceHandler, nil
}

// InitializeServiceRepository is the injector for ServiceRepository.
func InitializeServiceRepository(db *gorm.DB) (repository.ServiceRepository, error) {
	serviceRepository := repository.NewGormServiceRepository(db)
	return serviceRepository, nil
}

// InitializeServiceTypeRepository is the injector for ServiceTypeRepository.
func InitializeServiceTypeRepository(db *gorm.DB) (repository.ServiceTypeRepository, error) {
	serviceTypeRepository := repository.NewGormServiceTypeRepository(db)
	return serviceTypeRepository, nil
}

// InitializeServiceInstanceHandler is the injector for ServiceInstanceHandler.
func InitializeServiceInstanceHandler(db *gorm.DB, logger *zap.Logger, serviceRepo repository.ServiceRepository, envRepo repository.EnvironmentRepository) (*handler.ServiceInstanceHandler, error) {
	serviceInstanceRepository := repository.NewServiceInstanceRepository(db, logger)
	serviceInstanceService := service.NewServiceInstanceService(serviceInstanceRepository, serviceRepo, envRepo, logger)
	auditLogRepository := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepository, logger)
	serviceInstanceHandler := handler.NewServiceInstanceHandler(serviceInstanceService, auditLogService, logger)
	return serviceInstanceHandler, nil
}

// InitializeBusinessHandler is the injector for BusinessHandler and its dependencies.
func InitializeBusinessHandler(db *gorm.DB, logger *zap.Logger) (*handler.BusinessHandler, error) {
	businessRepository := repository.NewBusinessRepository(db, logger)
	businessService := service.NewBusinessService(businessRepository, logger)
	businessHandler := handler.NewBusinessHandler(businessService, logger)
	return businessHandler, nil
}

// InitializeBugHandler is the injector for BugHandler and its dependencies.
func InitializeBugHandler(db *gorm.DB, logger *zap.Logger) (*handler.BugHandler, error) {
	bugRepository := repository.NewBugRepository(db, logger)
	bugService := service.NewBugService(bugRepository)
	bugHandler := handler.NewBugHandler(bugService)
	return bugHandler, nil
}

// InitializeAuditLogHandler is the injector for AuditLogHandler and its dependencies.
func InitializeAuditLogHandler(db *gorm.DB, logger *zap.Logger) (*handler.AuditLogHandler, error) {
	auditLogRepository := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepository, logger)
	auditLogHandler := handler.NewAuditLogHandler(auditLogService, logger)
	return auditLogHandler, nil
}

// InitializeAuditLogService is the injector for AuditLogService.
func InitializeAuditLogService(db *gorm.DB, logger *zap.Logger) (service.AuditLogService, error) {
	auditLogRepository := repository.NewAuditLogRepository(db, logger)
	auditLogService := service.NewAuditLogService(auditLogRepository, logger)
	return auditLogService, nil
}

// wire.go:

// ProviderSet for user components
var UserSet = wire.NewSet(repository.NewUserRepository, repository.NewRoleRepository, service.NewUserService, handler.NewUserHandler, wire.Bind(new(repository.RoleRepository), new(*repository.RoleRepositoryImpl)))

// ProviderSet for role components
var RoleSet = wire.NewSet(repository.NewRoleRepository, service.NewRoleService, handler.NewRoleHandler, wire.Bind(new(repository.RoleRepository), new(*repository.RoleRepositoryImpl)), wire.Bind(new(service.RoleService), new(*service.RoleServiceImpl)))

// ProviderSet for auth components
var AuthSet = wire.NewSet(repository.NewUserRepository, service.NewAuthService, handler.NewAuthHandler)

// ProviderSet for permission components
var PermissionSet = wire.NewSet(repository.NewPermissionRepository, wire.Bind(new(repository.PermissionRepository), new(*repository.PermissionRepositoryImpl)), repository.NewRoleRepository, wire.Bind(new(repository.RoleRepository), new(*repository.RoleRepositoryImpl)), service.NewPermissionService, handler.NewPermissionHandler)

// ProviderSet for responsibility components
var ResponsibilitySet = wire.NewSet(repository.NewGormResponsibilityRepository, service.NewResponsibilityService, handler.NewResponsibilityHandler)

// ProviderSet for responsibility group components
var ResponsibilityGroupSet = wire.NewSet(repository.NewGormResponsibilityGroupRepository, repository.NewGormResponsibilityRepository, service.NewResponsibilityGroupService, handler.NewResponsibilityGroupHandler)

// ProviderSet for Environment components
var EnvironmentSet = wire.NewSet(repository.NewGormEnvironmentRepository, service.NewEnvironmentService, handler.NewEnvironmentHandler)

// ProviderSet for Asset components
var AssetSet = wire.NewSet(repository.NewGormAssetRepository, service.NewAssetService, handler.NewAssetHandler)

// ProviderSet for Service components
var ServiceSet = wire.NewSet(repository.NewGormServiceRepository, repository.NewGormServiceTypeRepository, service.NewServiceService, handler.NewServiceHandler)

// ProviderSet for service instance components
var ServiceInstanceSet = wire.NewSet(repository.NewServiceInstanceRepository, service.NewServiceInstanceService, handler.NewServiceInstanceHandler)

// ProviderSet for business components
var BusinessSet = wire.NewSet(repository.NewBusinessRepository, service.NewBusinessService, handler.NewBusinessHandler)

// ProviderSet for bug management components
var BugSet = wire.NewSet(repository.NewBugRepository, service.NewBugService, handler.NewBugHandler)

// ProviderSet for audit log components
var AuditLogSet = wire.NewSet(repository.NewAuditLogRepository, service.NewAuditLogService, handler.NewAuditLogHandler)
