// Code generated by MockGen. DO NOT EDIT.
// Source: service_instance_service.go
//
// Generated by this command:
//
//	mockgen -source=service_instance_service.go -destination=mocks/mock_service_instance_service.go -package=mocks ServiceInstanceService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repository "EffiPlat/backend/internal/repository"
	service "EffiPlat/backend/internal/service"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceInstanceService is a mock of ServiceInstanceService interface.
type MockServiceInstanceService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceServiceMockRecorder
	isgomock struct{}
}

// MockServiceInstanceServiceMockRecorder is the mock recorder for MockServiceInstanceService.
type MockServiceInstanceServiceMockRecorder struct {
	mock *MockServiceInstanceService
}

// NewMockServiceInstanceService creates a new mock instance.
func NewMockServiceInstanceService(ctrl *gomock.Controller) *MockServiceInstanceService {
	mock := &MockServiceInstanceService{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceService) EXPECT() *MockServiceInstanceServiceMockRecorder {
	return m.recorder
}

// CreateServiceInstance mocks base method.
func (m *MockServiceInstanceService) CreateServiceInstance(ctx context.Context, input *service.ServiceInstanceInputDTO) (*service.ServiceInstanceOutputDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceInstance", ctx, input)
	ret0, _ := ret[0].(*service.ServiceInstanceOutputDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceInstance indicates an expected call of CreateServiceInstance.
func (mr *MockServiceInstanceServiceMockRecorder) CreateServiceInstance(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceInstance", reflect.TypeOf((*MockServiceInstanceService)(nil).CreateServiceInstance), ctx, input)
}

// DeleteServiceInstance mocks base method.
func (m *MockServiceInstanceService) DeleteServiceInstance(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceInstance", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceInstance indicates an expected call of DeleteServiceInstance.
func (mr *MockServiceInstanceServiceMockRecorder) DeleteServiceInstance(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceInstance", reflect.TypeOf((*MockServiceInstanceService)(nil).DeleteServiceInstance), ctx, id)
}

// GetServiceInstanceByID mocks base method.
func (m *MockServiceInstanceService) GetServiceInstanceByID(ctx context.Context, id uint) (*service.ServiceInstanceOutputDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInstanceByID", ctx, id)
	ret0, _ := ret[0].(*service.ServiceInstanceOutputDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceInstanceByID indicates an expected call of GetServiceInstanceByID.
func (mr *MockServiceInstanceServiceMockRecorder) GetServiceInstanceByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInstanceByID", reflect.TypeOf((*MockServiceInstanceService)(nil).GetServiceInstanceByID), ctx, id)
}

// ListServiceInstances mocks base method.
func (m *MockServiceInstanceService) ListServiceInstances(ctx context.Context, params *repository.ListServiceInstancesParams) (*service.ListServiceInstancesResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceInstances", ctx, params)
	ret0, _ := ret[0].(*service.ListServiceInstancesResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceInstances indicates an expected call of ListServiceInstances.
func (mr *MockServiceInstanceServiceMockRecorder) ListServiceInstances(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceInstances", reflect.TypeOf((*MockServiceInstanceService)(nil).ListServiceInstances), ctx, params)
}

// UpdateServiceInstance mocks base method.
func (m *MockServiceInstanceService) UpdateServiceInstance(ctx context.Context, id uint, input *service.ServiceInstanceInputDTO) (*service.ServiceInstanceOutputDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceInstance", ctx, id, input)
	ret0, _ := ret[0].(*service.ServiceInstanceOutputDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceInstance indicates an expected call of UpdateServiceInstance.
func (mr *MockServiceInstanceServiceMockRecorder) UpdateServiceInstance(ctx, id, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceInstance", reflect.TypeOf((*MockServiceInstanceService)(nil).UpdateServiceInstance), ctx, id, input)
}
