// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/audit_log_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "EffiPlat/backend/internal/model"
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockAuditLogService is a mock of AuditLogService interface.
type MockAuditLogService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLogServiceMockRecorder
}

// MockAuditLogServiceMockRecorder is the mock recorder for MockAuditLogService.
type MockAuditLogServiceMockRecorder struct {
	mock *MockAuditLogService
}

// NewMockAuditLogService creates a new mock instance.
func NewMockAuditLogService(ctrl *gomock.Controller) *MockAuditLogService {
	mock := &MockAuditLogService{ctrl: ctrl}
	mock.recorder = &MockAuditLogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditLogService) EXPECT() *MockAuditLogServiceMockRecorder {
	return m.recorder
}

// CreateLog mocks base method.
func (m *MockAuditLogService) CreateLog(ctx context.Context, log *model.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLog", ctx, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLog indicates an expected call of CreateLog.
func (mr *MockAuditLogServiceMockRecorder) CreateLog(ctx, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLog", reflect.TypeOf((*MockAuditLogService)(nil).CreateLog), ctx, log)
}

// FindLogByID mocks base method.
func (m *MockAuditLogService) FindLogByID(ctx context.Context, id uint) (*model.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLogByID", ctx, id)
	ret0, _ := ret[0].(*model.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLogByID indicates an expected call of FindLogByID.
func (mr *MockAuditLogServiceMockRecorder) FindLogByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLogByID", reflect.TypeOf((*MockAuditLogService)(nil).FindLogByID), ctx, id)
}

// FindLogs mocks base method.
func (m *MockAuditLogService) FindLogs(ctx context.Context, params model.AuditLogQueryParams) ([]model.AuditLog, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLogs", ctx, params)
	ret0, _ := ret[0].([]model.AuditLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindLogs indicates an expected call of FindLogs.
func (mr *MockAuditLogServiceMockRecorder) FindLogs(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLogs", reflect.TypeOf((*MockAuditLogService)(nil).FindLogs), ctx, params)
}

// LogUserAction mocks base method.
func (m *MockAuditLogService) LogUserAction(c *gin.Context, action, resource string, resourceID uint, details interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogUserAction", c, action, resource, resourceID, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogUserAction indicates an expected call of LogUserAction.
func (mr *MockAuditLogServiceMockRecorder) LogUserAction(c, action, resource, resourceID, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogUserAction", reflect.TypeOf((*MockAuditLogService)(nil).LogUserAction), c, action, resource, resourceID, details)
}
