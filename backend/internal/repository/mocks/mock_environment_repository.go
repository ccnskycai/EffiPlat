// Code generated by MockGen. DO NOT EDIT.
// Source: EffiPlat/backend/internal/repository (interfaces: EnvironmentRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_environment_repository.go -package=mocks EffiPlat/backend/internal/repository EnvironmentRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "EffiPlat/backend/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEnvironmentRepository is a mock of EnvironmentRepository interface.
type MockEnvironmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentRepositoryMockRecorder
	isgomock struct{}
}

// MockEnvironmentRepositoryMockRecorder is the mock recorder for MockEnvironmentRepository.
type MockEnvironmentRepositoryMockRecorder struct {
	mock *MockEnvironmentRepository
}

// NewMockEnvironmentRepository creates a new mock instance.
func NewMockEnvironmentRepository(ctrl *gomock.Controller) *MockEnvironmentRepository {
	mock := &MockEnvironmentRepository{ctrl: ctrl}
	mock.recorder = &MockEnvironmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentRepository) EXPECT() *MockEnvironmentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEnvironmentRepository) Create(ctx context.Context, environment *model.Environment) (*model.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, environment)
	ret0, _ := ret[0].(*model.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEnvironmentRepositoryMockRecorder) Create(ctx, environment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEnvironmentRepository)(nil).Create), ctx, environment)
}

// Delete mocks base method.
func (m *MockEnvironmentRepository) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEnvironmentRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEnvironmentRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockEnvironmentRepository) GetByID(ctx context.Context, id uint) (*model.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEnvironmentRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEnvironmentRepository)(nil).GetByID), ctx, id)
}

// GetBySlug mocks base method.
func (m *MockEnvironmentRepository) GetBySlug(ctx context.Context, slug string) (*model.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", ctx, slug)
	ret0, _ := ret[0].(*model.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug.
func (mr *MockEnvironmentRepositoryMockRecorder) GetBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockEnvironmentRepository)(nil).GetBySlug), ctx, slug)
}

// List mocks base method.
func (m *MockEnvironmentRepository) List(ctx context.Context, params model.EnvironmentListParams) ([]model.Environment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]model.Environment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockEnvironmentRepositoryMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEnvironmentRepository)(nil).List), ctx, params)
}

// Update mocks base method.
func (m *MockEnvironmentRepository) Update(ctx context.Context, environment *model.Environment) (*model.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, environment)
	ret0, _ := ret[0].(*model.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEnvironmentRepositoryMockRecorder) Update(ctx, environment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEnvironmentRepository)(nil).Update), ctx, environment)
}
