// Code generated by MockGen. DO NOT EDIT.
// Source: EffiPlat/backend/internal/repository (interfaces: ServiceTypeRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_service_type_repository.go -package=mocks EffiPlat/backend/internal/repository ServiceTypeRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "EffiPlat/backend/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceTypeRepository is a mock of ServiceTypeRepository interface.
type MockServiceTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceTypeRepositoryMockRecorder
	isgomock struct{}
}

// MockServiceTypeRepositoryMockRecorder is the mock recorder for MockServiceTypeRepository.
type MockServiceTypeRepositoryMockRecorder struct {
	mock *MockServiceTypeRepository
}

// NewMockServiceTypeRepository creates a new mock instance.
func NewMockServiceTypeRepository(ctrl *gomock.Controller) *MockServiceTypeRepository {
	mock := &MockServiceTypeRepository{ctrl: ctrl}
	mock.recorder = &MockServiceTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceTypeRepository) EXPECT() *MockServiceTypeRepositoryMockRecorder {
	return m.recorder
}

// CheckExists mocks base method.
func (m *MockServiceTypeRepository) CheckExists(ctx context.Context, id uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExists indicates an expected call of CheckExists.
func (mr *MockServiceTypeRepositoryMockRecorder) CheckExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExists", reflect.TypeOf((*MockServiceTypeRepository)(nil).CheckExists), ctx, id)
}

// Create mocks base method.
func (m *MockServiceTypeRepository) Create(ctx context.Context, serviceType *model.ServiceType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, serviceType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceTypeRepositoryMockRecorder) Create(ctx, serviceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceTypeRepository)(nil).Create), ctx, serviceType)
}

// Delete mocks base method.
func (m *MockServiceTypeRepository) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceTypeRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceTypeRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockServiceTypeRepository) GetByID(ctx context.Context, id uint) (*model.ServiceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.ServiceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceTypeRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockServiceTypeRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockServiceTypeRepository) GetByName(ctx context.Context, name string) (*model.ServiceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*model.ServiceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockServiceTypeRepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockServiceTypeRepository)(nil).GetByName), ctx, name)
}

// List mocks base method.
func (m *MockServiceTypeRepository) List(ctx context.Context, params model.ServiceTypeListParams) ([]model.ServiceType, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]model.ServiceType)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServiceTypeRepositoryMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceTypeRepository)(nil).List), ctx, params)
}

// Update mocks base method.
func (m *MockServiceTypeRepository) Update(ctx context.Context, serviceType *model.ServiceType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, serviceType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceTypeRepositoryMockRecorder) Update(ctx, serviceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceTypeRepository)(nil).Update), ctx, serviceType)
}
