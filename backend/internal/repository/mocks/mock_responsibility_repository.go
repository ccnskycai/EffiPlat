// Code generated by MockGen. DO NOT EDIT.
// Source: EffiPlat/backend/internal/repository (interfaces: ResponsibilityRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_responsibility_repository.go -package=mocks EffiPlat/backend/internal/repository ResponsibilityRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "EffiPlat/backend/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResponsibilityRepository is a mock of ResponsibilityRepository interface.
type MockResponsibilityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResponsibilityRepositoryMockRecorder
	isgomock struct{}
}

// MockResponsibilityRepositoryMockRecorder is the mock recorder for MockResponsibilityRepository.
type MockResponsibilityRepositoryMockRecorder struct {
	mock *MockResponsibilityRepository
}

// NewMockResponsibilityRepository creates a new mock instance.
func NewMockResponsibilityRepository(ctrl *gomock.Controller) *MockResponsibilityRepository {
	mock := &MockResponsibilityRepository{ctrl: ctrl}
	mock.recorder = &MockResponsibilityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponsibilityRepository) EXPECT() *MockResponsibilityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockResponsibilityRepository) Create(ctx context.Context, responsibility *model.Responsibility) (*model.Responsibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, responsibility)
	ret0, _ := ret[0].(*model.Responsibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResponsibilityRepositoryMockRecorder) Create(ctx, responsibility any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResponsibilityRepository)(nil).Create), ctx, responsibility)
}

// Delete mocks base method.
func (m *MockResponsibilityRepository) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResponsibilityRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResponsibilityRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockResponsibilityRepository) GetByID(ctx context.Context, id uint) (*model.Responsibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Responsibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockResponsibilityRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockResponsibilityRepository)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockResponsibilityRepository) List(ctx context.Context, params model.ResponsibilityListParams) ([]model.Responsibility, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]model.Responsibility)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockResponsibilityRepositoryMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResponsibilityRepository)(nil).List), ctx, params)
}

// Update mocks base method.
func (m *MockResponsibilityRepository) Update(ctx context.Context, responsibility *model.Responsibility) (*model.Responsibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, responsibility)
	ret0, _ := ret[0].(*model.Responsibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResponsibilityRepositoryMockRecorder) Update(ctx, responsibility any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResponsibilityRepository)(nil).Update), ctx, responsibility)
}
