// Code generated by MockGen. DO NOT EDIT.
// Source: EffiPlat/backend/internal/repository (interfaces: ResponsibilityGroupRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_responsibility_group_repository.go -package=mocks EffiPlat/backend/internal/repository ResponsibilityGroupRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "EffiPlat/backend/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResponsibilityGroupRepository is a mock of ResponsibilityGroupRepository interface.
type MockResponsibilityGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResponsibilityGroupRepositoryMockRecorder
	isgomock struct{}
}

// MockResponsibilityGroupRepositoryMockRecorder is the mock recorder for MockResponsibilityGroupRepository.
type MockResponsibilityGroupRepositoryMockRecorder struct {
	mock *MockResponsibilityGroupRepository
}

// NewMockResponsibilityGroupRepository creates a new mock instance.
func NewMockResponsibilityGroupRepository(ctrl *gomock.Controller) *MockResponsibilityGroupRepository {
	mock := &MockResponsibilityGroupRepository{ctrl: ctrl}
	mock.recorder = &MockResponsibilityGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponsibilityGroupRepository) EXPECT() *MockResponsibilityGroupRepositoryMockRecorder {
	return m.recorder
}

// AddResponsibilityToGroup mocks base method.
func (m *MockResponsibilityGroupRepository) AddResponsibilityToGroup(ctx context.Context, groupID, responsibilityID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResponsibilityToGroup", ctx, groupID, responsibilityID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResponsibilityToGroup indicates an expected call of AddResponsibilityToGroup.
func (mr *MockResponsibilityGroupRepositoryMockRecorder) AddResponsibilityToGroup(ctx, groupID, responsibilityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResponsibilityToGroup", reflect.TypeOf((*MockResponsibilityGroupRepository)(nil).AddResponsibilityToGroup), ctx, groupID, responsibilityID)
}

// Create mocks base method.
func (m *MockResponsibilityGroupRepository) Create(ctx context.Context, group *model.ResponsibilityGroup, responsibilityIDs []uint) (*model.ResponsibilityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, group, responsibilityIDs)
	ret0, _ := ret[0].(*model.ResponsibilityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResponsibilityGroupRepositoryMockRecorder) Create(ctx, group, responsibilityIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResponsibilityGroupRepository)(nil).Create), ctx, group, responsibilityIDs)
}

// Delete mocks base method.
func (m *MockResponsibilityGroupRepository) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResponsibilityGroupRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResponsibilityGroupRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockResponsibilityGroupRepository) GetByID(ctx context.Context, id uint) (*model.ResponsibilityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.ResponsibilityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockResponsibilityGroupRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockResponsibilityGroupRepository)(nil).GetByID), ctx, id)
}

// GetResponsibilitiesForGroup mocks base method.
func (m *MockResponsibilityGroupRepository) GetResponsibilitiesForGroup(ctx context.Context, groupID uint) ([]model.Responsibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsibilitiesForGroup", ctx, groupID)
	ret0, _ := ret[0].([]model.Responsibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsibilitiesForGroup indicates an expected call of GetResponsibilitiesForGroup.
func (mr *MockResponsibilityGroupRepositoryMockRecorder) GetResponsibilitiesForGroup(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsibilitiesForGroup", reflect.TypeOf((*MockResponsibilityGroupRepository)(nil).GetResponsibilitiesForGroup), ctx, groupID)
}

// List mocks base method.
func (m *MockResponsibilityGroupRepository) List(ctx context.Context, params model.ResponsibilityGroupListParams) ([]model.ResponsibilityGroup, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]model.ResponsibilityGroup)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockResponsibilityGroupRepositoryMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResponsibilityGroupRepository)(nil).List), ctx, params)
}

// RemoveResponsibilityFromGroup mocks base method.
func (m *MockResponsibilityGroupRepository) RemoveResponsibilityFromGroup(ctx context.Context, groupID, responsibilityID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveResponsibilityFromGroup", ctx, groupID, responsibilityID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveResponsibilityFromGroup indicates an expected call of RemoveResponsibilityFromGroup.
func (mr *MockResponsibilityGroupRepositoryMockRecorder) RemoveResponsibilityFromGroup(ctx, groupID, responsibilityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveResponsibilityFromGroup", reflect.TypeOf((*MockResponsibilityGroupRepository)(nil).RemoveResponsibilityFromGroup), ctx, groupID, responsibilityID)
}

// ReplaceResponsibilitiesForGroup mocks base method.
func (m *MockResponsibilityGroupRepository) ReplaceResponsibilitiesForGroup(ctx context.Context, groupID uint, responsibilityIDs []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceResponsibilitiesForGroup", ctx, groupID, responsibilityIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceResponsibilitiesForGroup indicates an expected call of ReplaceResponsibilitiesForGroup.
func (mr *MockResponsibilityGroupRepositoryMockRecorder) ReplaceResponsibilitiesForGroup(ctx, groupID, responsibilityIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceResponsibilitiesForGroup", reflect.TypeOf((*MockResponsibilityGroupRepository)(nil).ReplaceResponsibilitiesForGroup), ctx, groupID, responsibilityIDs)
}

// Update mocks base method.
func (m *MockResponsibilityGroupRepository) Update(ctx context.Context, group *model.ResponsibilityGroup, responsibilityIDs *[]uint) (*model.ResponsibilityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, group, responsibilityIDs)
	ret0, _ := ret[0].(*model.ResponsibilityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResponsibilityGroupRepositoryMockRecorder) Update(ctx, group, responsibilityIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResponsibilityGroupRepository)(nil).Update), ctx, group, responsibilityIDs)
}
