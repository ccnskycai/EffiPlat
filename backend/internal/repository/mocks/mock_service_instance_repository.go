// Code generated by MockGen. DO NOT EDIT.
// Source: EffiPlat/backend/internal/repository (interfaces: ServiceInstanceRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_service_instance_repository.go -package=mocks EffiPlat/backend/internal/repository ServiceInstanceRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "EffiPlat/backend/internal/model"
	repository "EffiPlat/backend/internal/repository"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceInstanceRepository is a mock of ServiceInstanceRepository interface.
type MockServiceInstanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceRepositoryMockRecorder
	isgomock struct{}
}

// MockServiceInstanceRepositoryMockRecorder is the mock recorder for MockServiceInstanceRepository.
type MockServiceInstanceRepositoryMockRecorder struct {
	mock *MockServiceInstanceRepository
}

// NewMockServiceInstanceRepository creates a new mock instance.
func NewMockServiceInstanceRepository(ctrl *gomock.Controller) *MockServiceInstanceRepository {
	mock := &MockServiceInstanceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceRepository) EXPECT() *MockServiceInstanceRepositoryMockRecorder {
	return m.recorder
}

// CheckExists mocks base method.
func (m *MockServiceInstanceRepository) CheckExists(ctx context.Context, serviceID, environmentID uint, version string, excludeID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExists", ctx, serviceID, environmentID, version, excludeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExists indicates an expected call of CheckExists.
func (mr *MockServiceInstanceRepositoryMockRecorder) CheckExists(ctx, serviceID, environmentID, version, excludeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExists", reflect.TypeOf((*MockServiceInstanceRepository)(nil).CheckExists), ctx, serviceID, environmentID, version, excludeID)
}

// Create mocks base method.
func (m *MockServiceInstanceRepository) Create(ctx context.Context, instance *model.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceInstanceRepositoryMockRecorder) Create(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceInstanceRepository)(nil).Create), ctx, instance)
}

// Delete mocks base method.
func (m *MockServiceInstanceRepository) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceInstanceRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceInstanceRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockServiceInstanceRepository) GetByID(ctx context.Context, id uint) (*model.ServiceInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceInstanceRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockServiceInstanceRepository)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockServiceInstanceRepository) List(ctx context.Context, params *repository.ListServiceInstancesParams) ([]*model.ServiceInstance, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]*model.ServiceInstance)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServiceInstanceRepositoryMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceInstanceRepository)(nil).List), ctx, params)
}

// Update mocks base method.
func (m *MockServiceInstanceRepository) Update(ctx context.Context, instance *model.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceInstanceRepositoryMockRecorder) Update(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceInstanceRepository)(nil).Update), ctx, instance)
}
