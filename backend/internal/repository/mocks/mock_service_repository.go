// Code generated by MockGen. DO NOT EDIT.
// Source: EffiPlat/backend/internal/repository (interfaces: ServiceRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_service_repository.go -package=mocks EffiPlat/backend/internal/repository ServiceRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "EffiPlat/backend/internal/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceRepository is a mock of ServiceRepository interface.
type MockServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRepositoryMockRecorder
	isgomock struct{}
}

// MockServiceRepositoryMockRecorder is the mock recorder for MockServiceRepository.
type MockServiceRepositoryMockRecorder struct {
	mock *MockServiceRepository
}

// NewMockServiceRepository creates a new mock instance.
func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRepository) EXPECT() *MockServiceRepositoryMockRecorder {
	return m.recorder
}

// CountServicesByServiceTypeID mocks base method.
func (m *MockServiceRepository) CountServicesByServiceTypeID(ctx context.Context, serviceTypeID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountServicesByServiceTypeID", ctx, serviceTypeID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountServicesByServiceTypeID indicates an expected call of CountServicesByServiceTypeID.
func (mr *MockServiceRepositoryMockRecorder) CountServicesByServiceTypeID(ctx, serviceTypeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountServicesByServiceTypeID", reflect.TypeOf((*MockServiceRepository)(nil).CountServicesByServiceTypeID), ctx, serviceTypeID)
}

// Create mocks base method.
func (m *MockServiceRepository) Create(ctx context.Context, service *models.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceRepositoryMockRecorder) Create(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceRepository)(nil).Create), ctx, service)
}

// Delete mocks base method.
func (m *MockServiceRepository) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockServiceRepository) GetByID(ctx context.Context, id uint) (*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockServiceRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockServiceRepository) GetByName(ctx context.Context, name string) (*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockServiceRepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockServiceRepository)(nil).GetByName), ctx, name)
}

// List mocks base method.
func (m *MockServiceRepository) List(ctx context.Context, params models.ServiceListParams) ([]models.Service, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]models.Service)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServiceRepositoryMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceRepository)(nil).List), ctx, params)
}

// Update mocks base method.
func (m *MockServiceRepository) Update(ctx context.Context, service *models.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceRepositoryMockRecorder) Update(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceRepository)(nil).Update), ctx, service)
}
